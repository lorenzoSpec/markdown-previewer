{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["library","add","fab","faExpandArrowsAlt","faCompressAlt","marked","setOptions","breaks","renderer","Renderer","link","href","title","text","App","props","state","markdown","editorStatus","previewStatus","handleChange","bind","edtStat","preStat","e","this","setState","target","value","things","things2","id","className","onClick","icon","wrap","cols","rows","onChange","dangerouslySetInnerHTML","__html","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUASAA,IAAQC,IAAIC,IAAKC,IAAmBC,KAEpCC,IAAOC,WAAW,CACdC,QAAQ,IAGZ,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAASC,EAAMC,EAAOC,GAClC,MAAM,2BAAN,OAAkCF,EAAlC,YAA0CE,EAA1C,UAGJ,IAiHeC,E,kDAnEX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,SAjDK,qmCAkDLC,cAAc,EACdC,eAAe,GAGnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAVD,E,gDAalB,SAAaG,GACTC,KAAKC,SAAS,CACVT,SAAUO,EAAEG,OAAOC,U,qBAI3B,WACIH,KAAKC,SAAS,CACVR,cAAeO,KAAKT,MAAME,iB,qBAIlC,WACIO,KAAKC,SAAS,CACVP,eAAgBM,KAAKT,MAAMG,kB,oBAKnC,WACI,IAAIU,EAASJ,KAAKT,MAAME,aACX,CAAC,eAAgB,MAAO,KAAM,eAC9B,CAAC,oBAAqB,KAAM,KAAM,WAC3CY,EAAUL,KAAKT,MAAMG,cACZ,CAAC,eAAgB,eACjB,CAAC,oBAAqB,WACnC,OACI,sBAAKY,GAAG,YAAR,UACI,sBAAKA,GAAIF,EAAO,GAAhB,UACI,0BAASG,UAAU,QAAnB,UACI,0CACA,qBAAKA,UAAU,cAAcC,QAASR,KAAKH,QAA3C,SACI,cAAC,IAAD,CAAiBY,KAAML,EAAO,UAGtC,0BAAUM,KAAK,MAAMP,MAAOH,KAAKT,MAAMC,SAAUc,GAAG,SAASK,KAAMP,EAAO,GAAIQ,KAAMR,EAAO,GAAIS,SAAUb,KAAKL,kBAElH,sBAAKW,GAAID,EAAQ,GAAjB,UACI,0BAASE,UAAU,QAAnB,UACI,2CACA,qBAAKA,UAAU,cAAcC,QAASR,KAAKF,QAA3C,SACI,cAAC,IAAD,CAAiBW,KAAMJ,EAAQ,UAGvC,qBAAKS,wBAAyB,CACtBC,OAAQnC,IAAOoB,KAAKT,MAAMC,SAAU,CAAET,SAAUA,KAEvDuB,GAAG,sB,GA7DNU,IAAMC,WCrDTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e534dd4d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport marked from \"marked\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faExpandArrowsAlt, faCompressAlt } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(fab, faExpandArrowsAlt, faCompressAlt);\n\nmarked.setOptions({\n    breaks: true\n  });\n\nconst renderer = new marked.Renderer();\nrenderer.link = function(href, title, text){\n    return `<a target=\"_blank\" href=${href}>${text}></a>`;\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            markdown: placeholder,\n            editorStatus: false,\n            previewStatus: false\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.edtStat = this.edtStat.bind(this);\n        this.preStat = this.preStat.bind(this);\n    }\n\n    handleChange(e){\n        this.setState({\n            markdown: e.target.value\n        });\n    }\n\n    edtStat(){\n        this.setState({\n            editorStatus: !this.state.editorStatus\n        });\n    }\n\n    preStat(){\n        this.setState({\n            previewStatus: !this.state.previewStatus\n        });\n    }\n\n\n    render(){\n        let things = this.state.editorStatus ? \n                     [\"compress-alt\", \"190\", \"39\", \"edt-div-exp\"] :\n                     [\"expand-arrows-alt\", \"85\", \"39\", \"edt-div\"];\n        let things2 = this.state.previewStatus ? \n                     [\"compress-alt\", \"pre-div-exp\"] :\n                     [\"expand-arrows-alt\", \"pre-div\"];\n        return (\n            <div id=\"container\">\n                <div id={things[3]}>\n                    <section className=\"label\">\n                        <h2>Markdown</h2>\n                        <div className=\"exp-shr-div\" onClick={this.edtStat}>\n                            <FontAwesomeIcon icon={things[0]} />\n                        </div>\n                    </section>\n                    <textarea wrap=\"off\" value={this.state.markdown} id=\"editor\" cols={things[1]} rows={things[2]} onChange={this.handleChange}></textarea>\n                </div>\n                <div id={things2[1]}>\n                    <section className=\"label\">\n                        <h2>Previewer</h2>\n                        <div className=\"exp-shr-div\" onClick={this.preStat}>\n                            <FontAwesomeIcon icon={things2[0]} />\n                        </div>\n                    </section>\n                    <div dangerouslySetInnerHTML={{\n                            __html: marked(this.state.markdown, { renderer: renderer })\n                     }}\n                     id=\"preview\"/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}